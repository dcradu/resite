# Spatial resolution (in degrees) of the potential sites.
spatial_resolution: 0.5

# Path towards the various input data.
path_resource_data: '../input_data/resource_data/'
path_transfer_function_data: '../input_data/transfer_functions/'
path_population_density_data: '../input_data/population_density/'
path_protected_areas_data: '../input_data/protected_areas/'
path_landseamask: '../input_data/land_mask/'
path_load_data: '../input_data/load_data/'
path_bus_data: '../input_data/transmission_data/'
path_orography_data: '../input_data/land_mask/'

# Various data layers to be taken into account in potential site selection.
population_density_layer: True
protected_areas_layer: False
bathymetry_layer: True
orography_layer: True
forestry_layer: True

# Threshold above which no generation capacity is deployed.
population_density_threshold: 150.
# Selected protected areas. Check here for details: http://datasets.wri.org/dataset/64b69c0fb0834351bd6c0ceb3744c5ad
protected_areas_selection: ['Ia', 'Ib', 'II', 'Not Applicable']
# Distance threshold from protected areas (nothing built closer than this value in km).
protected_areas_threshold: 20.
# Depth threshold for offshore locations.
depth_threshold: 100.
# Altitude threshold for onshore locations.
altitude_threshold: 1500.
# Slope threshold for onshore locations (irrespective of the underlying resource).
slope_threshold: 0.03
# Forestry threshold (as share [0.0 - 1.0] of forestry within the given ERA5 node.
forestry_threshold: 0.8

# Start time and end time of the analysis.
time_slice: ['2013-01-01T00:00', '2013-01-31T23:00']
# List of regions to be considered in the optimization. To note that a list of pre-defined regions is available
# in tools.py, within the `return_coordinates_from_countries` function. Yet, if additional regions are defined,
# an associated load signal should be assigned in the `read_load_data` function.
regions: ['US']
# Consideration of offshore points associated with these regions.
add_offshore: True
# Technologies to deploy. Must have a 'RESOURCE_CONVERTER' structure. Only two technologies available for now.
technologies: ['wind_aerodyn', 'solar_tallmaxm']


# Assessment measure for each time window. Available: mean, median or percentiles.
resource_quality_measure: 'mean'
# Defines how \alpha is considered in space and time. (load_based, uniform, percentile)
alpha_rule: 'time_dependent'
# For the load-dependent \alpha, it sets how regions are aggregated. (centralized, partitioned)
alpha_plan: 'centralized'
# Normalization procedures (detailed in tools.py). (min, max)
alpha_norm: 'min'
# Capacity factor threshold used to compute the criticality indicators. If given as 'float', is uniform across regions. If percentile, it's assigned location-wise.
alpha_numerical: 0.3
# Time-window length used to compute the criticality indicator. Integer value.
delta: 1
# Geographical coverage threshold used to compute the criticality indicator. Float value between 0.0 and 1.0
beta: 0.9

# Choice of solver. Available: 'gurobi' and 'cplex'.
solver: 'gurobi'
# MIP gap --- 0.01 = 1%
mipgap: 0.05

# Type of problem to be solved. Check models.py for a full list.
main_problem: 'Covering'
# Objective of the problem. Check models.py for a full list.
main_objective: 'cardinality_floor'
# Solution method: None, Projection, Lagrange
solution_method: 'None'
# Langrangian subproblem: Inexact/Exact
subgradient_approximation: 'Inexact'
# Number of Lagrangian iterations. Positive integer value.
no_iterations_Lagrange: 1000
# Number of Simulated Annealing iterations. Positive integer value.
no_iterations_SA: 500
# Number of explorations within an epoque. Positive integer value.
no_explorations_SA: 1000

# List of deployments per region (ordered as the 'regions' list above)
cardinality_constraint: [20]
# Capacity budget in GW. Float value.
capacity_constraint: 200.0
# Monetary budget in units. Float value.
cost_budget: 4000.0

# Keeping files at the end of the run.
keep_files: True
# Choosing a low-memory alternative for model construction.
low_memory: False
